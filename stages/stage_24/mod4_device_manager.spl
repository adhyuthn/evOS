alias functionNum R1;
alias currentPID R2;
// Checl later. Why R7? It should be R0, NO?
alias returnValue R7;

if (functionNum == TERMINAL_WRITE) then
    multipush(R1, R2);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2);
    print R3;

    multipush(R1, R2);
    R1 = RELEASE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    returnValue = R0;
    multipop(R1, R2);
    return;
endif;

if (functionNum == TERMINAL_READ) then
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);
    read;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_TERMINAL;
    multipush(R1, R2, R3);
    call SCHEDULER;
    multipop(R1, R2, R3);
    // The Address in R3 is logical
    [[PTBR + 2 * (R3 / 512)] * 512 + (R3 % 512)] = [PROCESS_TABLE + currentPID * 16 + 8];
    return;
endif;

if (functionNum == DISK_LOAD) then 
    alias currentPID R2;
    alias pageNum R3;
    alias diskNum R4;
    multipush(R2, R3, R4);
    R1 = ACQUIRE_DISK;
    call RESOURCE_MANAGER;
    multipop(R2, R3, R4);
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNum;
    [DISK_STATUS_TABLE + 3] = diskNum;
    // I believe address Translation isn't required
    load(pageNum, diskNum);
    [PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
    call SCHEDULER;
    return;
endif;

if (functionNum == DISK_STORE) then
    alias currentPID R2;
    alias pageNum    R3;
    alias blockNum   R4;
    multipush(R2, R3, R4);
    R1 = ACQUIRE_DISK;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R2, R3, R4);
    // STATUS field is set by ACQUIRE_DISK
    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = pageNum;
    [DISK_STATUS_TABLE + 3] = blockNum;
    
    store(pageNum, blockNum);
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
    call SCHEDULER;
    return;
endif;
