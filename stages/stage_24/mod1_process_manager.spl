alias functionNum R1;
if (functionNum == FREE_USER_AREA_PAGE) then
    alias currentPID R2;
    alias counter R3;
    alias perProcessBase R4;
    // Release Resources
    counter = 0;
    perProcessBase = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET;
    while(counter < 8) do 
        if ([perProcessBase + counter * 2 ] == SEMAPHORE) then
            multipush(R2, R3, R4);
            R1 = RELEASE_SEMAPHORE;
            R2 = currentPID;
            R3 = [perProcessBase + counter * 2 + 1];
            call RESOURCE_MANAGER;
            multipop(R2, R3, R4);
        else 
        if ([perProcessBase + counter * 2 ] == FILE) then
            multipush(R2, R3, R4);
            R1 = CLOSE;
            R2 = [perProcessBase + counter * 2 + 1];
            call FILE_MANAGER;
            multipop(R2, R3, R4);
        endif;
        endif;
        [perProcessBase + counter * 2] = -1;
        counter = counter + 1;
    endwhile;

    multipush(R1, R2);
    R1 = RELEASE_PAGE;
    R2 = [PROCESS_TABLE + currentPID*16 + 11];
    call MEMORY_MANAGER;
    multipop(R1, R2);
    return;
endif;

if(functionNum == EXIT_PROCESS) then
    alias currentPID R2;
    multipush(R1, R2);
    R1 = FREE_PAGE_TABLE;
    call PROCESS_MANAGER;
    multipop(R1, R2);
    multipush(R1, R2);
    R1 = FREE_USER_AREA_PAGE;
    call PROCESS_MANAGER;
    multipop(R1, R2);
    [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
    if ([PROCESS_TABLE + currentPID * 16 + 9] != INT_EXEC) then
        alias process R3;
        process = 0;
        while (process < 16) do 
            if ([PROCESS_TABLE + process * 16 + 4] == WAIT_PROCESS &&
                [PROCESS_TABLE + process * 16 + 5] == currentPID) then
                [PROCESS_TABLE + process * 16 + 4] = READY;
            endif;
            if ([PROCESS_TABLE + process * 16 + 2] == currentPID) then 
                [PROCESS_TABLE + process * 16 + 2] = -1;
            endif;
            process = process + 1;
        endwhile;
    endif;
    return;
endif;

if(functionNum == FREE_PAGE_TABLE) then
    alias currentPID R2;
    // Ig it is better to not use PTBR directly. Why? IDK.
    // Why else would you pass the PID as an argument. 
    // It may be useful later. Better follow the standards
    alias pageTableBase R3;
    alias counter R4;
    pageTableBase = [PROCESS_TABLE + currentPID*16 + 14];
    // Don't release the library
    [pageTableBase+0] = -1;
    [pageTableBase+1] = "0000";
    [pageTableBase+2] = -1;
    [pageTableBase+3] = "0000";
    counter = 4;
    while (counter < 20) do
        multipush(R1, R2, R3, R4);
        R1 = RELEASE_PAGE;
        R2 = [pageTableBase + counter];
        call MEMORY_MANAGER;
        multipop(R1, R2, R3, R4);
        [pageTableBase + counter] = -1;
        [pageTableBase + counter + 1] = "0000";
        counter = counter + 2;
    endwhile;
    // Unleash RELEASE_BLOCK on heap and stack copies in disk
    alias diskMapEntry R5;
    diskMapEntry = DISK_MAP_TABLE + currentPID * 10;
    counter = 2;
    while(counter < 10) do
        if ([diskMapEntry + counter] != -1) then
            multipush(R1, R2, R3, R4, R5);
            R1 = RELEASE_BLOCK;
            R3 = currentPID; // currentPID is R2;
            R2 = [diskMapEntry + counter];
            call MEMORY_MANAGER;
            multipop(R1, R2, R3, R4, R5);
            if (counter == 3) then
                counter = 8;
            endif;
        endif;
        counter = counter + 1;
    endwhile;
    return;
endif;

if(functionNum == GET_PCB_ENTRY) then
    alias index R1;
    index = 0;
    while (index < 16) do
        if ([PROCESS_TABLE + index * 16 + 4] == TERMINATED) then
            [PROCESS_TABLE + index * 16 + 1] = index;
            [PROCESS_TABLE + index * 16 + 4] = ALLOCATED;
            [PROCESS_TABLE + index * 16 + 14] = PAGE_TABLE_BASE + 20 * index;
            [PROCESS_TABLE + index * 16 + 15] = 10;
            R0 = index;
            return;
        endif;
        index = index + 1;
    endwhile;
    R0 = -1;
    return;
endif;
