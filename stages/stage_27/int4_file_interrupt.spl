alias userSP R0;
alias sysCallNum R1;
alias physicalAddrRetVal R2;
alias currentPID R3;
userSP = SP;
currentPID = [SYSTEM_STATUS_TABLE + 1];
sysCallNum = [([PTBR + 2 * ((userSP - 5) / 512)] * 512) + ((userSP - 5) % 512)];
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);


if (sysCallNum == INT_CREATE) then
    [PROCESS_TABLE + currentPID * 16 + 9] = INT_CREATE;
    alias index R4;
    alias fileName R5;
    alias permission R6;
    fileName   = [([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];
    permission = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];
    index = 0;
    // If file ppresent, return 0
    while (index < MAX_FILE_NUM) do
        if ([INODE_TABLE + index * 16 + 1] == fileName) then
            [physicalAddrRetVal] = 0;
            goto Exit_Interrupt;
        endif;
        index = index + 1;
    endwhile;

    index = 0;
    // find free entry
    while (index < MAX_FILE_NUM) do
        if ([INODE_TABLE + index * 16 +  1] == -1) then 
            // INODE TABLE setup
            [INODE_TABLE + index * 16 +  0] = DATA;
            [INODE_TABLE + index * 16 +  1] = fileName;
            [INODE_TABLE + index * 16 +  2] = 0;
            [INODE_TABLE + index * 16 +  3] = [PROCESS_TABLE + currentPID * 16 + 3];
            [INODE_TABLE + index * 16 +  4] = permission;
            [INODE_TABLE + index * 16 +  8] = -1;
            [INODE_TABLE + index * 16 +  9] = -1;
            [INODE_TABLE + index * 16 + 10] = -1; 
            [INODE_TABLE + index * 16 + 11] = -1; 

            // Root File setup
            [ROOT_FILE + index * 8 + 0] = fileName; 
            [ROOT_FILE + index * 8 + 1] = 0;
            [ROOT_FILE + index * 8 + 2] = DATA;
            [ROOT_FILE + index * 8 + 3] = [USER_TABLE + [PROCESS_TABLE + currentPID * 16 + 3] * 2];
            [ROOT_FILE + index * 8 + 4] = permission;
            [physicalAddrRetVal] = 0;
            goto Exit_Interrupt;
        endif;
        index = index + 1;
    endwhile;
    // No free entry
    [physicalAddrRetVal] = -1;
    goto Exit_Interrupt;
endif;

if (sysCallNum == INT_DELETE) then
    [PROCESS_TABLE + currentPID * 16 + 9] = INT_DELETE;
    alias fileName R4;
    alias index R5;
    alias blockNum R6;
    alias counter R7;
    alias counter2 R8;
    
    fileName = [([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];
    // store userSP and switch to kernel stack
    [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = userSP;
    SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
    index = 0;
    while (index < MAX_FILE_NUM) do
        if ([INODE_TABLE + index * 16 + 1] == fileName) then
                if ([INODE_TABLE + index * 16] != DATA) then
                    [physicalAddrRetVal] = -1;
                    SP = userSP;
                    goto Exit_Interrupt;
                endif;
                if ([INODE_TABLE + index * 16 + 4] == EXCLUSIVE) then
                    // owner check (Root is id 1)
                    if ([PROCESS_TABLE + currentPID * 16 + 3] != ROOT && 
                        [PROCESS_TABLE + currentPID * 16 + 3] != [INODE_TABLE + index * 16 + 3]) then
                        [physicalAddrRetVal] = -1;
                        SP = userSP;
                        goto Exit_Interrupt;
                    endif;
                endif;
            multipush(R0);
            multipush(R2, R3, R4, R5);
            R1 = ACQUIRE_INODE;
            R2 = index;
            R3 = currentPID;
            call RESOURCE_MANAGER;
            multipop(R2, R3, R4, R5);
            if (R0 == -1) then
                multipop(R0);
                [physicalAddrRetVal] = 0;
                SP = userSP;
                goto Exit_Interrupt;
            endif;
            multipop(R0);
            // Check if file is open...if yes return -2
            if ([FILE_STATUS_TABLE + index * 4 + 1] != -1) then
                multipush(R0, R2, R3, R4, R5);
                R1 = RELEASE_INODE;
                R2 = index;
                R3 = currentPID;
                call RESOURCE_MANAGER;
                multipop(R0, R2, R3, R4, R5);
                [physicalAddrRetVal] = -2;
                SP = userSP;
                goto Exit_Interrupt;
            endif;
            blockNum = 0;
            counter = 0;
            // Release corresponding blocks
            while(counter < MAX_FILE_BLOCKS) do
                blockNum = [INODE_TABLE + index * 16 + 8 + counter];
                if (blockNum != -1) then
                    counter2 = 0;
                    // Reset dirty bit of block - check buffer
                    while (counter2 < MAX_BUFFER) do 
                        if ([BUFFER_TABLE + counter2 * 4] == blockNum && 
                            [BUFFER_TABLE + counter2 * 4 + 1] == 1) then
                            [BUFFER_TABLE + counter2 * 4 + 1] = 0;
                        endif;
                        counter2 = counter2 + 1;
                    endwhile;
                    // Relase block
                    // Remove these unecessary push
                    multipush(R0, R2, R3, R5, R6, R7);
                    R1 = RELEASE_BLOCK;
                    R2 = blockNum;
                    R3 = currentPID;
                    call MEMORY_MANAGER;
                    multipop(R0, R2, R3, R5, R6, R7);
                endif;
                counter = counter + 1;
            endwhile;
            
            // Invalidate Inode entry
            [INODE_TABLE + index * 16 + 1] = -1;
            // Invalidate root entry
            [ROOT_FILE + index * 8] = -1;
            multipush(R0, R2, R3, R5, R6, R7);
            R1 = RELEASE_INODE;
            R2 = index;
            R3 = currentPID;
            call RESOURCE_MANAGER;
            multipop(R0, R2, R3, R5, R6, R7);

            [physicalAddrRetVal] = 0;
            SP = userSP;
            goto Exit_Interrupt;
        endif;
        index = index + 1;
    endwhile;
    // File not present
    [physicalAddrRetVal] = 0;
    SP = userSP;
    goto Exit_Interrupt;
endif;

Exit_Interrupt:
[PROCESS_TABLE + currentPID * 16 + 9] = 0;
ireturn;
