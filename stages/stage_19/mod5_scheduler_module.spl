alias current_pid R0;
alias process_table_entry R1;
current_pid = [SYSTEM_STATUS_TABLE+1];
process_table_entry = PROCESS_TABLE + current_pid * 16;

multipush(BP);

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias new_pid R3;
new_pid = current_pid;

while(1) do
    new_pid = ( new_pid + 1 ) % MAX_PROC_NUM;
    //print "--------";
    //print new_pid;
    //print current_pid;
    //print [PROCESS_TABLE + new_pid * 16 + 4];
    //print "--------";
    if (new_pid == current_pid) then
        new_pid = 0;
        break;
    else
        if (new_pid != -1 && [PROCESS_TABLE + new_pid * 16 + 4] == CREATED || [PROCESS_TABLE + new_pid* 16 + 4] == READY) then
            break;
        endif;
    endif;
endwhile;

process_table_entry = PROCESS_TABLE + new_pid * 16;
SP = [process_table_entry + 11] * 512 + [process_table_entry + 12];
PTBR = [process_table_entry + 14];
PTLR = [process_table_entry + 15];
[SYSTEM_STATUS_TABLE + 1] = new_pid;

// If CREATED, then process has no history, return directly to the user Stack.
if([process_table_entry + 4] == CREATED) then
    SP = [process_table_entry + 13];
    [process_table_entry + 4] = RUNNING;
    [process_table_entry + 9] = 0;
	ireturn;
endif;

[process_table_entry + 4] = RUNNING;
multipop(BP);
return;
