define assignPageAddr 38400;
[assignPageAddr + 3] = [assignPageAddr + 3] + 1;
alias userSP R0;
alias sysCallNum R1;
alias physicalAddrRetVal R2;
alias currentPID R3;
currentPID = [SYSTEM_STATUS_TABLE + 1];
userSP = SP;

sysCallNum = [([PTBR + 2 * ((userSP - 5) / 512)] * 512) + ((userSP - 5) % 512)];
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

// Store SP in UPTR
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = userSP;

// Switcht to the kernel stack of the process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

if (sysCallNum == INT_SEMGET) then
    alias perProcessBase R4;
    alias index R5;
    perProcessBase = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET;
    index = 0;
    [PROCESS_TABLE + currentPID * 16 + 9] = INT_SEMGET;
    // if no free entries, return -1
    [physicalAddrRetVal] = -1;
    while (index < 8) do
        // look for free entry in per-process table
        if ([perProcessBase + index * 2] == -1) then
            multipush(R0);
            multipush(R2, R3, R4, R5);
            R1 = ACQUIRE_SEMAPHORE;
            call RESOURCE_MANAGER;
            multipop(R2, R3, R4, R5);
            if (R0 == -1) then
                [physicalAddrRetVal] = -2;
            else
                [perProcessBase + index * 2    ] = SEMAPHORE;
                [perProcessBase + index * 2 + 1] = R0;
                [physicalAddrRetVal] = index;
            endif;
            multipop(R0);
            break;
        endif;
        index = index + 1;
    endwhile;
    goto Exit_Interrupt;
endif;

if (sysCallNum == INT_SEMRELEASE) then
    alias argSEMID R4;
    alias perProcessBase R5;
    [PROCESS_TABLE + currentPID * 16 + 9] = INT_SEMRELEASE;
    argSEMID = [([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];
    perProcessBase = [PROCESS_TABLE + currentPID * 16 + 11] * 512 + RESOURCE_TABLE_OFFSET;
    if (argSEMID >=0 &&
        argSEMID <=7 &&
        [perProcessBase + argSEMID * 2] == 1) then
        // valid argSEMID
        multipush(R0, R2, R3, R4, R5);
        R1 = RELEASE_SEMAPHORE;
        call RESOURCE_MANAGER;
        multipop(R0, R2, R3, R4, R5);
        [perProcessBase + argSEMID * 2] = -1;
    else 
        [physicalAddrRetVal] = -1;
    endif;
    goto Exit_Interrupt;
endif;

Exit_Interrupt:
[PROCESS_TABLE + currentPID * 16 + 9] = 0;
SP = userSP;
ireturn;
