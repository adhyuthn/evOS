alias functionNum R1;
alias currentPID R2;
alias returnValue R0;
alias pid R3;

if (functionNum == ACQUIRE_TERMINAL) then
    while ([TERMINAL_STATUS_TABLE + 0] == 1) do
        [PROCESS_TABLE + (currentPID * 16) + 4 ] = WAIT_TERMINAL;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;
    
    [TERMINAL_STATUS_TABLE + 0] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif;

if(functionNum == RELEASE_TERMINAL) then
    if (currentPID == [TERMINAL_STATUS_TABLE + 1] ) then
        [TERMINAL_STATUS_TABLE + 0] = 0;
        pid = 1;
        while (pid < 16) do
            if ([PROCESS_TABLE + pid * 16 + 4] == WAIT_TERMINAL) then
                [PROCESS_TABLE + pid * 16 + 4] = READY;
            endif;
            pid = pid + 1;
        endwhile;
        returnValue = 0;
        return;
    else
        returnValue = -1;
        return;
    endif;
endif;

if (functionNum == ACQUIRE_DISK) then
    alias currentPID R2;
    while ([DISK_STATUS_TABLE] == 1) do 
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
        multipush(R2);
        call SCHEDULER;
        multipop(R2);
    endwhile;
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;

if (functionNum == ACQUIRE_SEMAPHORE) then
    alias PID R2;
    alias index R3;
    index = 0;
    // return val for failure
    R0 = -1;
    while (index < 32) do
        if ([SEMAPHORE_TABLE + index * 4 + 1] == 0) then
            [SEMAPHORE_TABLE + index * 4 + 1] =  1;
            [SEMAPHORE_TABLE + index * 4    ] = -1;
            R0 = index;
            break;
        endif;
        index = index + 1;
    endwhile;
    return;
endif;

if (functionNum == RELEASE_SEMAPHORE) then
    alias PID R2;
    alias semTableIndex R3;
    alias counterPID R4;
    counterPID = 0;
    // unlock before releasing (do that only if req. PID = locking PID)
    if ([SEMAPHORE_TABLE + semTableIndex * 4] == PID) then
        [SEMAPHORE_TABLE + semTableIndex * 4] = -1;
        while (counterPID < 16) do
            if ([PROCESS_TABLE + counterPID * 16 + 4] == WAIT_SEMAPHORE &&
                [PROCESS_TABLE + counterPID * 16 + 5] == semTableIndex) then
                [PROCESS_TABLE + counterPID * 16 + 4] = READY;
            endif;
            counterPID = counterPID + 1;
        endwhile;
    endif;
    [SEMAPHORE_TABLE + semTableIndex * 4 + 1] = [SEMAPHORE_TABLE + semTableIndex * 4 + 1] - 1;
    return;
endif;

