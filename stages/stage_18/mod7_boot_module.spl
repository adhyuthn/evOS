define maxPageUsed 82; // IDLE process too.

// load libs
loadi(63,13);
loadi(64,14);

// load INODE and user table 
loadi(59,3);
loadi(60,4);

// load init code
loadi(65,7);
loadi(66,8);

// load Exhandler
loadi(2,15);
loadi(3,16);

// load timer interrupt
loadi(4, 17);
loadi(5, 18);

//load disk interrupt
loadi(6,19);
loadi(7,20);

// load console interrupt
loadi(8, 21);
loadi(9, 22);

// load INT 6 read interrupt
loadi(14, 27);
loadi(15, 28);

// load INT 7 write interrupt
loadi(16,29);
loadi(17,30);

// load INT 9 exec interrupt
loadi(20,33);
loadi(21,34);

// load INT 10 
loadi(22,35);
loadi(23,36);

// load MOD1 - Process Manager
loadi(42,55);
loadi(43,56);

// load MOD2 - Memory Manager
loadi(44,57);
loadi(45,58);

// load MOD5 - Scheduler
loadi(50,63);
loadi(51,64);

// load MOD4 - Device Manager
loadi(48,61);
loadi(49,62);

// load MOD0 - Resource Manager
loadi(40,53);
loadi(41,54);

// load PROC2 code
// loadi(83, 69);

// Initialize by setting STATE field of all PTEs to TERMINATED
alias proc R0;
proc = 0;
while(proc < MAX_PROC_NUM) do 
    [PROCESS_TABLE + proc * 16 + 4 ] = TERMINATED;
    proc = proc + 1;
endwhile;

// Initialize MEMORY_FREE_LIST
alias pageNum R0;
pageNum = 0;
while(pageNum <= maxPageUsed) do 
    [MEMORY_FREE_LIST + pageNum] = 1;
    pageNum = pageNum + 1;
endwhile;
while(pageNum <= MAX_MEM_PAGE) do 
    [MEMORY_FREE_LIST + pageNum] = 0;
    pageNum = pageNum + 1;
endwhile;

// Initialize WAIT_MEM_COUNT and MEM_FREE_COUNT
[SYSTEM_STATUS_TABLE + 2] = MAX_MEM_PAGE - maxPageUsed; 
[SYSTEM_STATUS_TABLE + 3] = 0; 

// Initialize Terminal Status table
[TERMINAL_STATUS_TABLE + 0] = 0;
// Initialize DISK Status table
[DISK_STATUS_TABLE + 0] = 0;

// ----------PROCESS SETUP----------------

// INIT PROCESS SETUP
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//INIT's PAGE TABLE
// user Lib space
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// user Heap space
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// user Code space
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// user Stack space
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// Setup Process Table
// For INIT process
// PID of process
[PROCESS_TABLE + 17] = 1;
// STATE of the INIT process state is set to RUNNING
[PROCESS_TABLE + 20] = CREATED;
// User Area
[PROCESS_TABLE + 27] = 80;
// KPTR of IDLE
[PROCESS_TABLE + 28] = 0;
// UPTR
[PROCESS_TABLE + 29] = 8*512;
// PTBR
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE + 20;
// PTLR
[PROCESS_TABLE + 31] = 10;

// PER-PROCESS TABLE
alias counter R0;
counter = 0;
while(counter < 8) do
    [[PROCESS_TABLE + 27] * 512 + RESOURCE_TABLE_OFFSET + counter * 2] = -1;
    counter = counter + 1;
endwhile;

[76 * 512] = [65 * 512 + 1];

// PROC2 PROCEESS SETUP

// PTBR = PAGE_TABLE_BASE + 40;
// PTLR = 10;
// 
// //PROC2's PAGE TABLE
// // user Lib space
// [PTBR+0] = 63;
// [PTBR+1] = "0100";
// [PTBR+2] = 64;
// [PTBR+3] = "0100";
// 
// // user Heap space
// [PTBR+4] = 84;
// [PTBR+5] = "0110";
// [PTBR+6] = 85;
// [PTBR+7] = "0110";
// 
// // user Code space
// [PTBR+8] = 83;
// [PTBR+9] = "0100";
// [PTBR+10] = -1;
// [PTBR+11] = "0000";
// [PTBR+12] = -1;
// [PTBR+13] = "0000";
// [PTBR+14] = -1;
// [PTBR+15] = "0000";
// 
// // user Stack space
// [PTBR+16] = 86;
// [PTBR+17] = "0110";
// [PTBR+18] = 87;
// [PTBR+19] = "0110";
// 
// // Setup Process Table
// // PID of process
// [PROCESS_TABLE + 33] = 2;
// // STATE of the INIT process state is set to RUNNING
// [PROCESS_TABLE + 36] = CREATED;
// // User Area
// [PROCESS_TABLE + 43] = 88;
// // KPTR of IDLE
// [PROCESS_TABLE + 44] = 0;
// // UPTR
// [PROCESS_TABLE + 45] = 8*512;
// // PTBR
// [PROCESS_TABLE + 46] = PAGE_TABLE_BASE + 40;
// // PTLR
// [PROCESS_TABLE + 47] = 10;
// 
// [86 * 512] = [83 * 512 + 1];


return;
